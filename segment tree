class segmentTree {
    vector<int> seg, lazy;
 
public :
    segmentTree(ll n) {
        seg.resize(4 * n + 1);
        lazy.resize(4 * n + 4);
    }
    void build(ll ind, ll l, ll r, vector<int> &v) {
        if (l == r) {seg[ind] = v[l]; return ;}
        ll m = (l + r) / 2;
        build(2 * ind + 1, l, m, v);
        build(2 * ind + 2, m + 1, r, v);
        seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
    }
    ll query(ll ind, ll low, ll high, ll l, ll r) {
        if (r < low || l > high) {
            return LLONG_MAX;
        }
        if (low >= l && high <= r) {
            return seg[ind];
        }
        ll mid = (low + high) / 2;
        ll lft = query(2 * ind + 1, low, mid, l, r);
        ll rgt = query(2 * ind + 2, mid + 1, high, l, r);
        return min(lft, rgt);
    }
    void update(ll ind, ll low, ll high, ll i, ll val) {
        if (low == high) {seg[ind] = val; return;}
        ll mid = (low + high) / 2;
        if (i <= mid) update(2 * ind + 1, low, mid, i, val);
        else update(2 * ind + 2, mid + 1, high, i, val);
        seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
    }
};
