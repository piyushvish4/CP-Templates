class segmentTree2 {
    vector<int> seg, lazy;
 
public :
    segmentTree2(ll n) {
        seg.resize(4 * n + 1);
        lazy.resize(4 * n + 4);
    }

    void build(ll ind, ll l, ll r, vector<int> &v) {
    if (l == r) {seg[ind] = v[l]; return ;}
        ll m = (l + r) / 2;
        build(2 * ind + 1, l, m, v);
        build(2 * ind + 2, m + 1, r, v);
        seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
    }

    ll query(ll ind, ll low, ll high, ll l, ll r) {
        if (lazy[ind] != 0) {
            seg[ind]+= (high - low + 1) * lazy[ind];
            if (low != high) {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }
        if (r < low || l > high) {
            return 0;
        }
        if (low >= l && high <= r) {
            return seg[ind];
        }
        ll mid = (low + high) / 2;
        ll lft = query(2 * ind + 1, low, mid, l, r);
        ll rgt = query(2 * ind + 2, mid + 1, high, l, r);
        return lft+rgt;
    }

    void update(ll ind, ll low, ll high, ll l, ll r, ll val) {
        //update previous remaining updates
        if (lazy[ind] != 0) {
            seg[ind]+= (high - low + 1) * lazy[ind];
            if (low != high) {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }
        if (high < l || r < low) return;
        if (low >= l && high <= r) {
            seg[ind] += (high - low + 1) * val;
            if (low != high) {
                lazy[2 * ind + 1] += val;
                lazy[2 * ind + 2] += val;
            }
            return ;
        }
        ll mid = (low + high) / 2;
        update(2 * ind + 1, low, mid, l, r, val);
        update(2 * ind + 2, mid + 1, high, l, r, val);
        seg[ind]+= seg[2 * ind + 1] + seg[2 * ind + 2];
    }
};
